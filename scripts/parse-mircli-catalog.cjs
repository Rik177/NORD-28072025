const fs = require('fs');
const path = require('path');

console.log('üîç –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–∞—Ç–∞–ª–æ–≥–∞...');

// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const rawData = fs.readFileSync('MIRCLI_CATALOGUE_results.json', 'utf8');
console.log('üìñ –§–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', (rawData.length / 1024 / 1024).toFixed(2), 'MB');

const data = JSON.parse(rawData);
console.log('‚úÖ JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω');

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
const categoriesStructure = {
  categories: [],
  products: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –≤ –ª–∞—Ç–∏–Ω–∏—Ü—É
function transliterate(text) {
  const cyrillicToLatin = {
    '–∞': 'a', '–±': 'b', '–≤': 'v', '–≥': 'g', '–¥': 'd', '–µ': 'e', '—ë': 'yo',
    '–∂': 'zh', '–∑': 'z', '–∏': 'i', '–π': 'y', '–∫': 'k', '–ª': 'l', '–º': 'm',
    '–Ω': 'n', '–æ': 'o', '–ø': 'p', '—Ä': 'r', '—Å': 's', '—Ç': 't', '—É': 'u',
    '—Ñ': 'f', '—Ö': 'h', '—Ü': 'ts', '—á': 'ch', '—à': 'sh', '—â': 'sch',
    '—ä': '', '—ã': 'y', '—å': '', '—ç': 'e', '—é': 'yu', '—è': 'ya',
    '–ê': 'A', '–ë': 'B', '–í': 'V', '–ì': 'G', '–î': 'D', '–ï': 'E', '–Å': 'Yo',
    '–ñ': 'Zh', '–ó': 'Z', '–ò': 'I', '–ô': 'Y', '–ö': 'K', '–õ': 'L', '–ú': 'M',
    '–ù': 'N', '–û': 'O', '–ü': 'P', '–†': 'R', '–°': 'S', '–¢': 'T', '–£': 'U',
    '–§': 'F', '–•': 'H', '–¶': 'Ts', '–ß': 'Ch', '–®': 'Sh', '–©': 'Sch',
    '–™': '', '–´': 'Y', '–¨': '', '–≠': 'E', '–Æ': 'Yu', '–Ø': 'Ya'
  };
  
  return text.split('').map(char => cyrillicToLatin[char] || char).join('');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function createId(name) {
  const transliterated = transliterate(name);
  return transliterated
    .toLowerCase()
    .replace(/[^a-z0-9]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceStr) {
  if (!priceStr) return 0;
  const match = priceStr.match(/(\d+(?:\s\d+)*)/);
  if (match) {
    return parseInt(match[1].replace(/\s/g, ''));
  }
  return 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function extractSpecifications(characteristics) {
  const specs = {};
  if (characteristics && Array.isArray(characteristics)) {
    characteristics.forEach(char => {
      if (char.name) {
        const [key, value] = char.name.split('\n');
        if (key && value) {
          specs[key.trim()] = value.trim();
        }
      }
    });
  }
  return specs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function extractBrand(productName) {
  const lines = productName.split('\n');
  if (lines.length > 1) {
    const secondLine = lines[1];
    const brandMatch = secondLine.match(/^([A-Z][A-Z0-9\s]+)/);
    if (brandMatch) {
      return brandMatch[1].trim();
    }
  }
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function extractModel(productName) {
  const lines = productName.split('\n');
  if (lines.length > 1) {
    const secondLine = lines[1];
    const modelMatch = secondLine.match(/[A-Z][A-Z0-9\s-]+/g);
    if (modelMatch && modelMatch.length > 1) {
      return modelMatch.slice(1).join(' ').trim();
    }
  }
  return '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function processCategories(items, parentPath = '', parentId = '') {
  const result = [];
  
  items.forEach((item, index) => {
    const categoryId = createId(item.name);
    const fullPath = parentPath ? `${parentPath}/${categoryId}` : categoryId;
    
    const category = {
      id: categoryId,
      name: item.name,
      path: fullPath,
      url: item.url,
      parentId: parentId,
      level: parentPath.split('/').length,
      subcategories: []
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (item.selection1) {
      category.subcategories = processCategories(item.selection1, fullPath, categoryId);
    } else if (item.selection2) {
      category.subcategories = processCategories(item.selection2, fullPath, categoryId);
    } else if (item.selection3) {
      category.subcategories = processCategories(item.selection3, fullPath, categoryId);
    }
    
    result.push(category);
  });
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Ç–∞–∫–∞—è –∂–µ –ª–æ–≥–∏–∫–∞ –∫–∞–∫ –≤ processCategories)
function createCategoryPath(item, parentPath = '') {
  const categoryId = createId(item.name);
  return parentPath ? `${parentPath}/${categoryId}` : categoryId;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –∫ –Ω–æ–≤—ã–º
function mapOldPathToNewPath(oldPath) {
  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ä—ã—Ö –ø—É—Ç–µ–π –∫ –Ω–æ–≤—ã–º
  const pathMapping = {
    'napol-nye': 'napol-nye-ventilyatory',
    'nastennye': 'nastennye-ventilyatory', 
    'nastol-nye': 'nastol-nye-ventilyatory',
    'potolochnye': 'potolochnye-ventilyatory',
    'vytyazhki-dlya-vannoy': 'vytyazhki-dlya-vannoy',
    'promyshlennye': 'promyshlennye'
  };
  
  // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
  const pathParts = oldPath.split('/');
  const mappedParts = pathParts.map(part => pathMapping[part] || part);
  return mappedParts.join('/');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤–æ –≤—Å–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö
function findProducts(data) {
  const products = [];
  let productCount = 0;
  
  // –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –ª—é–±–æ–º –æ–±—ä–µ–∫—Ç–µ
  function searchForProductsRecursively(obj, path = '') {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ —Ç–æ–≤–∞—Ä—ã
    if (obj.products && Array.isArray(obj.products)) {
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –≤: ${path}`);
      obj.products.forEach((product, index) => {
        productCount++;
        if (productCount % 100 === 0) {
          console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productCount}`);
        }
        
        const productId = createId(product.name);
        const brand = extractBrand(product.name);
        const model = extractModel(product.name);
        const price = extractPrice(product.price);
        const specifications = extractSpecifications(product.characteristics);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Ç–∏, —á—Ç–æ –∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        const categoryPath = mapOldPathToNewPath(path);
        
        const enhancedProduct = {
          id: productId,
          name: product.name.split('\n')[0],
          brand: brand,
          model: model,
          category: categoryPath,
          price: price,
          currency: 'RUB',
          availability: '–í –Ω–∞–ª–∏—á–∏–∏',
          image: product.image || product.image_url || '',
          specifications: specifications,
          url: product.image_url || '',
          rating: 0,
          reviewCount: 0,
          isNew: false,
          isSale: false,
          isPopular: false,
          isBestseller: false
        };
        
        products.push(enhancedProduct);
      });
    }
    
    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    if (obj.selection1) {
      obj.selection1.forEach(item => {
        const newPath = createCategoryPath(item, path);
        searchForProductsRecursively(item, newPath);
      });
    }
    
    if (obj.selection2) {
      obj.selection2.forEach(item => {
        const newPath = createCategoryPath(item, path);
        searchForProductsRecursively(item, newPath);
      });
    }
    
    if (obj.selection3) {
      obj.selection3.forEach(item => {
        const newPath = createCategoryPath(item, path);
        searchForProductsRecursively(item, newPath);
      });
    }
    
    if (obj.selection4) {
      obj.selection4.forEach(item => {
        const newPath = createCategoryPath(item, path);
        searchForProductsRecursively(item, newPath);
      });
    }
  }
  
  // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤–æ –≤—Å–µ—Ö –∫–ª—é—á–∞—Ö –æ–±—ä–µ–∫—Ç–∞ data
  Object.keys(data).forEach(key => {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–ª—é—á: ${key}`);
    if (Array.isArray(data[key])) {
      data[key].forEach((item, index) => {
        const itemPath = item.name ? createCategoryPath(item) : `item-${index}`;
        searchForProductsRecursively(item, itemPath);
      });
    } else if (typeof data[key] === 'object' && data[key] !== null) {
      searchForProductsRecursively(data[key], key);
    }
  });
  
  console.log(`‚úÖ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${productCount}`);
  return products;
}

console.log('üèóÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
if (data.dropdown__nav) {
  categoriesStructure.categories = processCategories(data.dropdown__nav);
  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesStructure.categories.length}`);
  
  console.log('üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –¥–∞–Ω–Ω—ã—Ö...');
  categoriesStructure.products = findProducts(data);
}

// –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
console.log('üìù –°–æ–∑–¥–∞—é TypeScript —Ñ–∞–π–ª...');

const categoriesTsContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ MIRCLI_CATALOGUE_results.json

export interface Subcategory {
  id: string;
  name: string;
  path: string;
  url: string;
  parentId: string;
  level: number;
  subcategories?: Subcategory[];
}

export interface Category {
  id: string;
  name: string;
  path: string;
  url: string;
  parentId: string;
  level: number;
  subcategories?: Subcategory[];
}

export interface ProductSpecification {
  [key: string]: string;
}

export interface Product {
  id: string;
  name: string;
  brand: string;
  model: string;
  category: string;
  price: number;
  currency: string;
  availability: string;
  image: string;
  specifications: ProductSpecification;
  url: string;
  rating: number;
  reviewCount: number;
  isNew: boolean;
  isSale: boolean;
  isPopular: boolean;
  isBestseller: boolean;
}

export const categories: Category[] = ${JSON.stringify(categoriesStructure.categories, null, 2)};

export const products: Product[] = ${JSON.stringify(categoriesStructure.products, null, 2)};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
export const getCategoryById = (id: string): Category | undefined => {
  return categories.find(cat => cat.id === id);
};

export const getCategoryByPath = (path: string): Category | undefined => {
  return categories.find(cat => cat.path === path);
};

export const getProductsByCategory = (categoryPath: string): Product[] => {
  return products.filter(product => product.category === categoryPath);
};

export const getProductsByBrand = (brand: string): Product[] => {
  return products.filter(product => product.brand.toLowerCase().includes(brand.toLowerCase()));
};

export const searchProducts = (query: string): Product[] => {
  const lowerQuery = query.toLowerCase();
  return products.filter(product => 
    product.name.toLowerCase().includes(lowerQuery) ||
    product.brand.toLowerCase().includes(lowerQuery) ||
    product.model.toLowerCase().includes(lowerQuery)
  );
};

export const getCategoryHierarchy = (categoryId: string): Category[] => {
  const hierarchy: Category[] = [];
  let currentCategory = categories.find(cat => cat.id === categoryId);
  
  while (currentCategory) {
    hierarchy.unshift(currentCategory);
    if (currentCategory.parentId) {
      currentCategory = categories.find(cat => cat.id === currentCategory.parentId);
    } else {
      break;
    }
  }
  
  return hierarchy;
};

export const getSubcategories = (categoryId: string): Category[] => {
  const category = categories.find(cat => cat.id === categoryId);
  return category?.subcategories || [];
};

export const getAllProducts = (): Product[] => {
  return products;
};

export const getProductsBySubcategory = (subcategoryPath: string): Product[] => {
  return products.filter(product => product.category === subcategoryPath);
};
`;

// –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
console.log('üìÑ –°–æ–∑–¥–∞—é JSON —Ñ–∞–π–ª...');
const jsonContent = JSON.stringify(categoriesStructure, null, 2);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
fs.writeFileSync('src/data/enhanced-categories.ts', categoriesTsContent);
fs.writeFileSync('src/data/enhanced-catalog-data.json', jsonContent);

console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesStructure.categories.length}`);
console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${categoriesStructure.products.length}`);
console.log('üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:');
console.log('  - src/data/enhanced-categories.ts');
console.log('  - src/data/enhanced-catalog-data.json'); 