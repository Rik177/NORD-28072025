import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

interface VentilationCategory {
  id: number;
  title: string;
  slug: string;
  description: string;
  image: string;
  productCount: number;
  parentId: number | null;
  subcategories: VentilationCategory[];
}

interface VentilationProduct {
  id: number;
  title: string;
  description: string;
  price: string;
  image: string;
  category: string;
  brand: string;
  characteristics: Record<string, string>;
  sku: string;
  rating: string | number;
  reviewCount: number;
}

interface VentilationData {
  categories: VentilationCategory[];
  products: VentilationProduct[];
}

class VentilationDataUpdater {
  async update() {
    try {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º ventilationData.ts...');

      // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª
      const jsonPath = path.join(__dirname, '..', 'src', 'data', 'ventilationData.json');
      const jsonData: VentilationData = JSON.parse(await fs.readFile(jsonPath, 'utf8'));

      // –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª
      const tsContent = this.generateTypeScriptContent(jsonData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º TypeScript —Ñ–∞–π–ª
      const tsPath = path.join(__dirname, '..', 'src', 'data', 'ventilationData.ts');
      await fs.writeFile(tsPath, tsContent, 'utf8');

      console.log('‚úÖ ventilationData.ts –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`);
      console.log(`   - –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${jsonData.categories.length}`);
      console.log(`   - –¢–æ–≤–∞—Ä–æ–≤: ${jsonData.products.length}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏:', error.message);
      throw error;
    }
  }

  generateTypeScriptContent(data: VentilationData): string {
    const timestamp = new Date().toISOString();
    
    let content = `// –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ —Å mircli.ru
// –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${timestamp}

export interface VentilationCategory {
  id: number;
  title: string;
  url: string;
  image?: string;
  productCount: number;
  subcategories: VentilationCategory[];
}

export interface VentilationProduct {
  id: number;
  name: string;
  category: string;
  price: string;
  image?: string;
  characteristics: string[];
  rating?: number;
  brand: string;
  description?: string;
}

// –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ mircli.ru
export const ventilationCategories: VentilationCategory[] = [
`;

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data.categories.forEach((category, index) => {
      content += `  {
    id: ${category.id},
    title: '${category.title}',
    url: 'https://mircli.ru/${category.slug}/',
    image: '${category.image}',
    productCount: ${category.productCount},
    subcategories: []
  }${index < data.categories.length - 1 ? ',' : ''}
`;
    });

    content += `];

// –¢–æ–≤–∞—Ä—ã –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
export const ventilationProducts: VentilationProduct[] = [
`;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã
    data.products.forEach((product, index) => {
      const characteristics = Object.entries(product.characteristics)
        .map(([key, value]) => `'${key}: ${value}'`)
        .join(',\n      ');

      content += `  {
    id: ${product.id},
    name: '${product.title}',
    category: '${product.category}',
    price: '${product.price} —Ä—É–±',
    image: '${product.image}',
    characteristics: [
      ${characteristics}
    ],
    rating: ${typeof product.rating === 'string' ? parseFloat(product.rating) : product.rating},
    brand: '${product.brand}',
    description: '${product.description}'
  }${index < data.products.length - 1 ? ',' : ''}
`;
    });

    content += `];

export const ventilationData = {
  categories: ventilationCategories,
  products: ventilationProducts,
  parsedAt: '${timestamp}',
  totalCategories: ${data.categories.length},
  totalProducts: ${data.products.length}
};
`;

    return content;
  }
}

// –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async function main() {
  const updater = new VentilationDataUpdater();
  await updater.update();
}

main().catch(console.error); 