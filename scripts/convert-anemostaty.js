import fs from 'fs';
import path from 'path';

// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–µ–º–æ—Å—Ç–∞—Ç–æ–≤
const anemostsData = JSON.parse(fs.readFileSync('anemostaty_results.json', 'utf-8'));

// –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–∞—Ç–∞–ª–æ–≥
const catalogPath = 'src/data/enhanced-catalog-data.json';
const catalog = JSON.parse(fs.readFileSync(catalogPath, 'utf-8'));

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function generateId(name) {
  return name
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^\w\-]/g, '')
    .replace(/--+/g, '-')
    .replace(/^-|-$/g, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã
function extractPrice(priceStr) {
  const match = priceStr.match(/(\d+(?:\s*\d+)*)/);
  return match ? parseInt(match[1].replace(/\s/g, '')) : 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Ç–∏–ø—É
function categorizeProduct(characteristics) {
  const typeChar = characteristics.find(char => char.name.includes('–¢–∏–ø'));
  if (!typeChar) return 'anemostaty';
  
  const type = typeChar.name.split('\n')[1];
  if (type === '–ü—Ä–∏—Ç–æ—á–Ω—ã–π') return 'anemostaty/pritochnye';
  if (type === '–í—ã—Ç—è–∂–Ω–æ–π') return 'anemostaty/vytyazhnye';
  if (type === '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π' || type === '–ü—Ä–∏—Ç–æ—á–Ω–æ-–≤—ã—Ç—è–∂–Ω–æ–π') return 'anemostaty/pritochno-vytyazhnye';
  
  return 'anemostaty';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function extractSpecifications(characteristics) {
  const specs = {};
  characteristics.forEach(char => {
    const parts = char.name.split('\n');
    if (parts.length === 2) {
      specs[parts[0]] = parts[1];
    }
  });
  return specs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏ –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
function extractBrandAndModel(name) {
  const lines = name.split('\n');
  if (lines.length >= 2) {
    const secondLine = lines[1];
    const parts = secondLine.split(' ');
    return {
      brand: parts[0] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
      model: parts.slice(1).join(' ') || secondLine
    };
  }
  return {
    brand: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
    model: name.split('\n')[0] || name
  };
}

// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–µ–º–æ—Å—Ç–∞—Ç–æ–≤
const convertedProducts = [];

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
if (anemostsData.product_card) {
  anemostsData.product_card.forEach(product => {
    const { brand, model } = extractBrandAndModel(product.name);
    const specifications = extractSpecifications(product.product_characteristics);
    const price = extractPrice(product.product_price);
    const category = categorizeProduct(product.product_characteristics);
    
    const convertedProduct = {
      id: generateId(product.name),
      name: product.product_model.replace(/\n/g, ' '),
      brand: brand,
      model: model,
      category: category,
      price: price,
      currency: "RUB",
      availability: "–í –Ω–∞–ª–∏—á–∏–∏",
      image: product.product_model_url,
      specifications: specifications,
      url: product.product_model_url,
      rating: 0,
      reviewCount: 0,
      isNew: false,
      isSale: false,
      isPopular: false
    };
    
    convertedProducts.push(convertedProduct);
  });
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
if (anemostsData.pagination) {
  anemostsData.pagination.forEach(page => {
    if (page.product_card) {
      page.product_card.forEach(product => {
        const { brand, model } = extractBrandAndModel(product.name);
        const specifications = extractSpecifications(product.product_characteristics);
        const price = extractPrice(product.product_price);
        const category = categorizeProduct(product.product_characteristics);
        
        const convertedProduct = {
          id: generateId(product.name),
          name: product.product_model.replace(/\n/g, ' '),
          brand: brand,
          model: model,
          category: category,
          price: price,
          currency: "RUB",
          availability: "–í –Ω–∞–ª–∏—á–∏–∏",
          image: product.product_model_url,
          specifications: specifications,
          url: product.product_model_url,
          rating: 0,
          reviewCount: 0,
          isNew: false,
          isSale: false,
          isPopular: false
        };
        
        convertedProducts.push(convertedProduct);
      });
    }
  });
}

// –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–µ–º–æ—Å—Ç–∞—Ç—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
catalog.products = catalog.products.filter(product => 
  !product.category.includes('anemostaty')
);

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –∞–Ω–µ–º–æ—Å—Ç–∞—Ç–æ–≤
catalog.products.push(...convertedProducts);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
fs.writeFileSync(catalogPath, JSON.stringify(catalog, null, 2), 'utf-8');

console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ ${convertedProducts.length} –∞–Ω–µ–º–æ—Å—Ç–∞—Ç–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥`);
console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);

const categoryStats = {};
convertedProducts.forEach(product => {
  categoryStats[product.category] = (categoryStats[product.category] || 0) + 1;
});

Object.entries(categoryStats).forEach(([category, count]) => {
  console.log(`   - ${category}: ${count} —Ç–æ–≤–∞—Ä–æ–≤`);
});

console.log(`üíæ –ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${catalogPath}`);
