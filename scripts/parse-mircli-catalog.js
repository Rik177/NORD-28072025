const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª
const rawData = fs.readFileSync('MIRCLI_CATALOGUE_results.json', 'utf8');
const data = JSON.parse(rawData);

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤
const categoriesStructure = {
  categories: [],
  products: []
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID
function createId(name) {
  return name
    .toLowerCase()
    .replace(/[^–∞-—èa-z0-9]/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
function extractPrice(priceStr) {
  if (!priceStr) return 0;
  const match = priceStr.match(/(\d+(?:\s\d+)*)/);
  if (match) {
    return parseInt(match[1].replace(/\s/g, ''));
  }
  return 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function extractSpecifications(characteristics) {
  const specs = {};
  if (characteristics && Array.isArray(characteristics)) {
    characteristics.forEach(char => {
      if (char.name) {
        const [key, value] = char.name.split('\n');
        if (key && value) {
          specs[key.trim()] = value.trim();
        }
      }
    });
  }
  return specs;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –±—Ä–µ–Ω–¥–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function extractBrand(productName) {
  const lines = productName.split('\n');
  if (lines.length > 1) {
    const secondLine = lines[1];
    // –ò—â–µ–º –±—Ä–µ–Ω–¥ –≤ —Å—Ç—Ä–æ–∫–µ (–æ–±—ã—á–Ω–æ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
    const brandMatch = secondLine.match(/^([A-Z][A-Z0-9\s]+)/);
    if (brandMatch) {
      return brandMatch[1].trim();
    }
  }
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
function extractModel(productName) {
  const lines = productName.split('\n');
  if (lines.length > 1) {
    const secondLine = lines[1];
    // –ò—â–µ–º –º–æ–¥–µ–ª—å (–æ–±—ã—á–Ω–æ —ç—Ç–æ –∫–æ–¥ –ø–æ—Å–ª–µ –±—Ä–µ–Ω–¥–∞)
    const modelMatch = secondLine.match(/[A-Z][A-Z0-9\s-]+/g);
    if (modelMatch && modelMatch.length > 1) {
      return modelMatch.slice(1).join(' ').trim();
    }
  }
  return '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ–±—Ö–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
function processCategories(items, parentPath = '', parentId = '') {
  const result = [];
  
  items.forEach((item, index) => {
    const categoryId = createId(item.name);
    const fullPath = parentPath ? `${parentPath}/${categoryId}` : categoryId;
    
    const category = {
      id: categoryId,
      name: item.name,
      path: fullPath,
      url: item.url,
      parentId: parentId,
      level: parentPath.split('/').length,
      subcategories: []
    };
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (item.selection1) {
      category.subcategories = processCategories(item.selection1, fullPath, categoryId);
    } else if (item.selection2) {
      category.subcategories = processCategories(item.selection2, fullPath, categoryId);
    } else if (item.selection3) {
      category.subcategories = processCategories(item.selection3, fullPath, categoryId);
    }
    
    result.push(category);
  });
  
  return result;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
function processProducts(items, categoryPath = '') {
  const products = [];
  
  items.forEach((item, index) => {
    if (item.products && Array.isArray(item.products)) {
      item.products.forEach((product, productIndex) => {
        const productId = createId(product.name);
        const brand = extractBrand(product.name);
        const model = extractModel(product.name);
        const price = extractPrice(product.price);
        const specifications = extractSpecifications(product.characteristics);
        
        const enhancedProduct = {
          id: productId,
          name: product.name.split('\n')[0], // –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
          brand: brand,
          model: model,
          category: categoryPath,
          price: price,
          currency: 'RUB',
          availability: '–í –Ω–∞–ª–∏—á–∏–∏',
          image: product.image || product.image_url || '',
          specifications: specifications,
          url: product.image_url || '',
          rating: 0,
          reviewCount: 0,
          isNew: false,
          isSale: false,
          isPopular: false,
          isBestseller: false
        };
        
        products.push(enhancedProduct);
      });
    }
  });
  
  return products;
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
if (data.dropdown__nav) {
  categoriesStructure.categories = processCategories(data.dropdown__nav);
  
  // –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const allProducts = [];
  
  function extractProductsFromCategories(categories, categoryPath = '') {
    categories.forEach(category => {
      const currentPath = categoryPath ? `${categoryPath}/${category.id}` : category.id;
      
      // –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const categoryProducts = processProducts([category], currentPath);
      allProducts.push(...categoryProducts);
      
      // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (category.subcategories && category.subcategories.length > 0) {
        extractProductsFromCategories(category.subcategories, currentPath);
      }
    });
  }
  
  extractProductsFromCategories(categoriesStructure.categories);
  categoriesStructure.products = allProducts;
}

// –°–æ–∑–¥–∞–µ–º TypeScript —Ñ–∞–π–ª —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
const categoriesTsContent = `// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ MIRCLI_CATALOGUE_results.json

export interface Subcategory {
  id: string;
  name: string;
  path: string;
  url: string;
  parentId: string;
  level: number;
  subcategories?: Subcategory[];
}

export interface Category {
  id: string;
  name: string;
  path: string;
  url: string;
  parentId: string;
  level: number;
  subcategories?: Subcategory[];
}

export interface ProductSpecification {
  [key: string]: string;
}

export interface Product {
  id: string;
  name: string;
  brand: string;
  model: string;
  category: string;
  price: number;
  currency: string;
  availability: string;
  image: string;
  specifications: ProductSpecification;
  url: string;
  rating: number;
  reviewCount: number;
  isNew: boolean;
  isSale: boolean;
  isPopular: boolean;
  isBestseller: boolean;
}

export const categories: Category[] = ${JSON.stringify(categoriesStructure.categories, null, 2)};

export const products: Product[] = ${JSON.stringify(categoriesStructure.products, null, 2)};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
export const getCategoryById = (id: string): Category | undefined => {
  return categories.find(cat => cat.id === id);
};

export const getCategoryByPath = (path: string): Category | undefined => {
  return categories.find(cat => cat.path === path);
};

export const getProductsByCategory = (categoryPath: string): Product[] => {
  return products.filter(product => product.category === categoryPath);
};

export const getProductsByBrand = (brand: string): Product[] => {
  return products.filter(product => product.brand.toLowerCase().includes(brand.toLowerCase()));
};

export const searchProducts = (query: string): Product[] => {
  const lowerQuery = query.toLowerCase();
  return products.filter(product => 
    product.name.toLowerCase().includes(lowerQuery) ||
    product.brand.toLowerCase().includes(lowerQuery) ||
    product.model.toLowerCase().includes(lowerQuery)
  );
};

export const getCategoryHierarchy = (categoryId: string): Category[] => {
  const hierarchy: Category[] = [];
  let currentCategory = categories.find(cat => cat.id === categoryId);
  
  while (currentCategory) {
    hierarchy.unshift(currentCategory);
    if (currentCategory.parentId) {
      currentCategory = categories.find(cat => cat.id === currentCategory.parentId);
    } else {
      break;
    }
  }
  
  return hierarchy;
};

export const getSubcategories = (categoryId: string): Category[] => {
  const category = categories.find(cat => cat.id === categoryId);
  return category?.subcategories || [];
};

export const getAllProducts = (): Product[] => {
  return products;
};

export const getProductsBySubcategory = (subcategoryPath: string): Product[] => {
  return products.filter(product => product.category === subcategoryPath);
};
`;

// –°–æ–∑–¥–∞–µ–º JSON —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
const jsonContent = JSON.stringify(categoriesStructure, null, 2);

// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
fs.writeFileSync('src/data/enhanced-categories.ts', categoriesTsContent);
fs.writeFileSync('src/data/enhanced-catalog-data.json', jsonContent);

console.log('‚úÖ –ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: ${categoriesStructure.categories.length}`);
console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${categoriesStructure.products.length}`);
console.log('üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:');
console.log('  - src/data/enhanced-categories.ts');
console.log('  - src/data/enhanced-catalog-data.json'); 