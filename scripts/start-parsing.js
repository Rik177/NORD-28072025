#!/usr/bin/env node

const readline = require('readline');
const EnhancedMircliVentilationParser = require('./ventilation-parser-enhanced');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(prompt) {
  return new Promise((resolve) => {
    rl.question(prompt, resolve);
  });
}

async function main() {
  console.log('üéØ –ü–∞—Ä—Å–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ —Å —Å–∞–π—Ç–∞ mircli.ru');
  console.log('=' .repeat(60));
  console.log('');
  
  console.log('üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:');
  console.log('1. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + —Ç–æ–≤–∞—Ä—ã + –¥–µ—Ç–∞–ª–∏)');
  console.log('2. –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
  console.log('3. –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å)');
  console.log('4. –¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –µ—Å—Ç—å)');
  console.log('5. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (1-2 —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)');
  console.log('');

  const mode = await question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-5): ');
  
  console.log('');
  console.log('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞:');
  
  const delay = await question('–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ') || '3';
  const timeout = await question('–¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–ø—á–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ') || '2';
  
  console.log('');
  console.log('‚ö†Ô∏è  –í–∞–∂–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:');
  console.log('‚Ä¢ –ü–∞—Ä—Å–µ—Ä –æ—Ç–∫—Ä–æ–µ—Ç –±—Ä–∞—É–∑–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('‚Ä¢ –ï—Å–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–∞–ø—á–∞, —Ä–µ—à–∏—Ç–µ –µ—ë –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('‚Ä¢ –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã');
  console.log('‚Ä¢ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 2-3 —á–∞—Å–∞');
  console.log('');

  const confirm = await question('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ');
  
  if (confirm.toLowerCase() !== 'y' && confirm.toLowerCase() !== 'yes') {
    console.log('‚ùå –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–º–µ–Ω–µ–Ω');
    rl.close();
    return;
  }

  console.log('');
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
  console.log('');

  // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  class CustomParser extends EnhancedMircliVentilationParser {
    constructor() {
      super();
      this.delayMs = parseInt(delay) * 1000;
      this.captchaTimeout = parseInt(timeout) * 60 * 1000;
      this.testMode = mode === '5';
    }

    async delay(ms) {
      return new Promise(resolve => setTimeout(resolve, this.delayMs));
    }

    async handleCaptcha() {
      const captchaSelectors = [
        '.captcha-form',
        '.captcha',
        '[class*="captcha"]',
        'form[action*="captcha"]'
      ];

      for (const selector of captchaSelectors) {
        const captchaExists = await this.page.$(selector);
        if (captchaExists) {
          console.log(`üîí –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–∞–ø—á–∞ (${selector})`);
          console.log('‚è≥ –û–∂–∏–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∫–∞–ø—á–∏...');
          
          try {
            await this.page.waitForSelector(selector, { 
              hidden: true, 
              timeout: this.captchaTimeout 
            });
            console.log('‚úÖ –ö–∞–ø—á–∞ —Ä–µ—à–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
            await this.delay(3000);
            return true;
          } catch (error) {
            console.log('‚ùå –ö–∞–ø—á–∞ –Ω–µ –±—ã–ª–∞ —Ä–µ—à–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
            return false;
          }
        }
      }
      return false;
    }

    async parseProducts() {
      if (this.testMode) {
        console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Ç–æ–≤–∞—Ä–∞');
        const allCategories = this.getAllCategories(this.categories);
        
        if (allCategories.length > 0) {
          const category = allCategories[0];
          console.log(`–ü–∞—Ä—Å–∏–Ω–≥ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è: ${category.title}`);
          
          try {
            await this.page.goto(category.url, { waitUntil: 'networkidle0' });
            await this.delay(3000);
            await this.handleCaptcha();

            const products = await this.page.evaluate((categoryTitle) => {
              const productSelectors = [
                '.catalog-item',
                '.product-item',
                '.product-card',
                '.item',
                '[class*="product"]',
                '[class*="item"]'
              ];

              const prods = [];
              const processedUrls = new Set();

              productSelectors.forEach(selector => {
                const elements = document.querySelectorAll(selector);
                elements.forEach((element, index) => {
                  if (prods.length >= 2) return; // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 2 —Ç–æ–≤–∞—Ä–∞–º–∏
                  
                  const link = element.querySelector('a') || element.closest('a');
                  const title = element.querySelector('.catalog-item__title, .product-item__title, .product-title, .title, h3, h4') || 
                               element.querySelector('[class*="title"]') ||
                               element.querySelector('strong, b');
                  const image = element.querySelector('img');
                  const price = element.querySelector('.price, .catalog-item__price, .product-price, [class*="price"]');
                  const sku = element.querySelector('.sku, .catalog-item__sku, .product-sku, [class*="sku"]');
                  
                  if (link && title && !processedUrls.has(link.href)) {
                    processedUrls.add(link.href);
                    prods.push({
                      id: Date.now() + index + Math.random(),
                      title: title.textContent.trim(),
                      url: link.href,
                      image: image ? image.src : null,
                      price: price ? price.textContent.trim() : null,
                      sku: sku ? sku.textContent.trim() : null,
                      category: categoryTitle,
                      categoryId: category.id
                    });
                  }
                });
              });
              
              return prods;
            }, category.title);

            this.products.push(...products);
            console.log(`–ù–∞–π–¥–µ–Ω–æ ${products.length} —Ç–æ–≤–∞—Ä–æ–≤ (—Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)`);
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è ${category.title}:`, error.message);
          }
        }
      } else {
        await super.parseProducts();
      }
    }

    async parseProductDetails() {
      if (this.testMode) {
        console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –ø–∞—Ä—Å–∏–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 2 —Ç–æ–≤–∞—Ä–æ–≤');
        const productsToParse = this.products.slice(0, 2);
        
        for (let i = 0; i < productsToParse.length; i++) {
          const product = productsToParse[i];
          console.log(`–ü–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è: ${product.title} (${i + 1}/${productsToParse.length})`);
          
          try {
            await this.page.goto(product.url, { waitUntil: 'networkidle0' });
            await this.delay(3000);
            await this.handleCaptcha();

            const details = await this.page.evaluate(() => {
              const descriptionSelectors = [
                '.product-description',
                '.description',
                '.product-info',
                '.product-details',
                '[class*="description"]',
                '[class*="info"]'
              ];

              const characteristicsSelectors = [
                '.product-characteristics',
                '.characteristics',
                '.specifications',
                '.product-specs',
                '[class*="characteristics"]',
                '[class*="specs"]'
              ];

              const imageSelectors = [
                '.product-gallery img',
                '.product-images img',
                '.gallery img',
                '.images img',
                '[class*="gallery"] img',
                '[class*="images"] img'
              ];

              let description = null;
              for (const selector of descriptionSelectors) {
                const element = document.querySelector(selector);
                if (element) {
                  description = element.textContent.trim();
                  break;
                }
              }

              const specs = {};
              for (const selector of characteristicsSelectors) {
                const element = document.querySelector(selector);
                if (element) {
                  const rows = element.querySelectorAll('tr, .characteristic-row, .spec-row, .row');
                  rows.forEach(row => {
                    const name = row.querySelector('td:first-child, .characteristic-name, .spec-name, .name') ||
                               row.querySelector('th, strong, b');
                    const value = row.querySelector('td:last-child, .characteristic-value, .spec-value, .value') ||
                                row.querySelector('td:nth-child(2)');
                    if (name && value) {
                      specs[name.textContent.trim()] = value.textContent.trim();
                    }
                  });
                  break;
                }
              }
              
              const imageUrls = [];
              for (const selector of imageSelectors) {
                const images = document.querySelectorAll(selector);
                if (images.length > 0) {
                  images.forEach(img => {
                    if (img.src && !imageUrls.includes(img.src)) {
                      imageUrls.push(img.src);
                    }
                  });
                  break;
                }
              }
              
              return {
                description,
                specifications: specs,
                images: imageUrls
              };
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç –≤ –º–∞—Å—Å–∏–≤–µ
            const productIndex = this.products.findIndex(p => p.id === product.id);
            if (productIndex !== -1) {
              this.products[productIndex] = { ...product, ...details };
            }
            
          } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è ${product.title}:`, error.message);
          }
        }
      } else {
        await super.parseProductDetails();
      }
    }

    async run() {
      try {
        await this.init();
        
        if (mode === '1' || mode === '2') {
          await this.parseCategories();
        }
        
        if (mode === '1' || mode === '3') {
          await this.parseProducts();
        }
        
        if (mode === '1' || mode === '4') {
          await this.parseProductDetails();
        }
        
        await this.saveData();
        console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ:', error);
      } finally {
        await this.close();
      }
    }
  }

  const parser = new CustomParser();
  await parser.run();
  
  rl.close();
}

main().catch(console.error); 