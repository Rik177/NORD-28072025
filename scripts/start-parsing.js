#!/usr/bin/env node

import readline from 'readline';
import { EnhancedMircliVentilationParser } from './ventilation-parser-enhanced.js';

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ –ü–∞—Ä—Å–µ—Ä –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ mircli.ru');
console.log('================================');

async function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, resolve);
  });
}

async function main() {
  try {
    console.log('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞:');
    console.log('1. –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ + —Ç–æ–≤–∞—Ä—ã + –¥–µ—Ç–∞–ª–∏)');
    console.log('2. –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    console.log('3. –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å)');
    console.log('4. –¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ (–µ—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã —É–∂–µ –µ—Å—Ç—å)');
    console.log('5. –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (1 –∫–∞—Ç–µ–≥–æ—Ä–∏—è, 1 —Ç–æ–≤–∞—Ä)');
    
    const mode = await askQuestion('\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ–∂–∏–º–∞ (1-5): ');
    
    console.log('\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
    const delay = await askQuestion('–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–º—Å, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2000): ') || '2000';
    const captchaTimeout = await askQuestion('–¢–∞–π–º–∞—É—Ç –¥–ª—è CAPTCHA (—Å–µ–∫, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ') || '60';
    
    const parser = new EnhancedMircliVentilationParser({
      delay: parseInt(delay),
      captchaTimeout: parseInt(captchaTimeout) * 1000
    });
    
    console.log('\n‚è≥ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞...');
    
    switch (mode) {
      case '1':
        console.log('–†–µ–∂–∏–º: –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥');
        await parser.init();
        await parser.parseCategories();
        await parser.parseProducts();
        await parser.saveData();
        break;
      case '2':
        console.log('–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
        await parser.init();
        await parser.parseCategories();
        await parser.saveData();
        break;
      case '3':
        console.log('–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã');
        await parser.init();
        await parser.parseProducts();
        await parser.saveData();
        break;
      case '4':
        console.log('–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤');
        await parser.init();
        await parser.parseProductDetails();
        await parser.saveData();
        break;
      case '5':
        console.log('–†–µ–∂–∏–º: –¢–µ—Å—Ç–æ–≤—ã–π');
        parser.testMode = true;
        await parser.init();
        await parser.parseCategories();
        await parser.parseProducts();
        await parser.saveData();
        break;
      default:
        console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º');
        return;
    }
    
    console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤:');
    console.log('   - src/data/mircli-ventilation-data.json');
    console.log('   - src/data/ventilationData.ts');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    rl.close();
  }
}

main(); 